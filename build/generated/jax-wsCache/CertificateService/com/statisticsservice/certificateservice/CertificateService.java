
package com.statisticsservice.certificateservice;

import java.util.List;
import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebResult;
import javax.jws.WebService;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.ws.Action;
import javax.xml.ws.FaultAction;
import javax.xml.ws.RequestWrapper;
import javax.xml.ws.ResponseWrapper;


/**
 * This class was generated by the JAX-WS RI.
 * JAX-WS RI 2.2.8
 * Generated source version: 2.2
 * 
 */
@WebService(name = "CertificateService", targetNamespace = "http://certificateservice.com/")
@XmlSeeAlso({
    ObjectFactory.class
})
public interface CertificateService {


    /**
     * 
     * @return
     *     returns java.util.List<com.statisticsservice.certificateservice.Certificate>
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getAllCertificates", targetNamespace = "http://certificateservice.com/", className = "com.statisticsservice.certificateservice.GetAllCertificates")
    @ResponseWrapper(localName = "getAllCertificatesResponse", targetNamespace = "http://certificateservice.com/", className = "com.statisticsservice.certificateservice.GetAllCertificatesResponse")
    @Action(input = "http://certificateservice.com/CertificateService/getAllCertificatesRequest", output = "http://certificateservice.com/CertificateService/getAllCertificatesResponse")
    public List<Certificate> getAllCertificates();

    /**
     * 
     * @param certificateCode
     * @return
     *     returns java.util.List<com.statisticsservice.certificateservice.Exam>
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getExamsForCertificate", targetNamespace = "http://certificateservice.com/", className = "com.statisticsservice.certificateservice.GetExamsForCertificate")
    @ResponseWrapper(localName = "getExamsForCertificateResponse", targetNamespace = "http://certificateservice.com/", className = "com.statisticsservice.certificateservice.GetExamsForCertificateResponse")
    @Action(input = "http://certificateservice.com/CertificateService/getExamsForCertificateRequest", output = "http://certificateservice.com/CertificateService/getExamsForCertificateResponse")
    public List<Exam> getExamsForCertificate(
        @WebParam(name = "certificateCode", targetNamespace = "")
        String certificateCode);

    /**
     * 
     * @param certificateCode
     * @return
     *     returns java.util.List<com.statisticsservice.certificateservice.Exam>
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getAllUpcomingExamsForCertificate", targetNamespace = "http://certificateservice.com/", className = "com.statisticsservice.certificateservice.GetAllUpcomingExamsForCertificate")
    @ResponseWrapper(localName = "getAllUpcomingExamsForCertificateResponse", targetNamespace = "http://certificateservice.com/", className = "com.statisticsservice.certificateservice.GetAllUpcomingExamsForCertificateResponse")
    @Action(input = "http://certificateservice.com/CertificateService/getAllUpcomingExamsForCertificateRequest", output = "http://certificateservice.com/CertificateService/getAllUpcomingExamsForCertificateResponse")
    public List<Exam> getAllUpcomingExamsForCertificate(
        @WebParam(name = "certificateCode", targetNamespace = "")
        String certificateCode);

    /**
     * 
     * @param examTypeCode
     * @return
     *     returns com.statisticsservice.certificateservice.ExamType
     * @throws NonexistentExamTypeException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getExamType", targetNamespace = "http://certificateservice.com/", className = "com.statisticsservice.certificateservice.GetExamType")
    @ResponseWrapper(localName = "getExamTypeResponse", targetNamespace = "http://certificateservice.com/", className = "com.statisticsservice.certificateservice.GetExamTypeResponse")
    @Action(input = "http://certificateservice.com/CertificateService/getExamTypeRequest", output = "http://certificateservice.com/CertificateService/getExamTypeResponse", fault = {
        @FaultAction(className = NonexistentExamTypeException_Exception.class, value = "http://certificateservice.com/CertificateService/getExamType/Fault/NonexistentExamTypeException")
    })
    public ExamType getExamType(
        @WebParam(name = "examTypeCode", targetNamespace = "")
        String examTypeCode)
        throws NonexistentExamTypeException_Exception
    ;

    /**
     * 
     * @param certificateCode
     * @return
     *     returns java.util.List<com.statisticsservice.certificateservice.ExamType>
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getExamTypeForCertificate", targetNamespace = "http://certificateservice.com/", className = "com.statisticsservice.certificateservice.GetExamTypeForCertificate")
    @ResponseWrapper(localName = "getExamTypeForCertificateResponse", targetNamespace = "http://certificateservice.com/", className = "com.statisticsservice.certificateservice.GetExamTypeForCertificateResponse")
    @Action(input = "http://certificateservice.com/CertificateService/getExamTypeForCertificateRequest", output = "http://certificateservice.com/CertificateService/getExamTypeForCertificateResponse")
    public List<ExamType> getExamTypeForCertificate(
        @WebParam(name = "certificateCode", targetNamespace = "")
        String certificateCode);

    /**
     * 
     * @return
     *     returns java.util.List<com.statisticsservice.certificateservice.ExamType>
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getAllExamTypes", targetNamespace = "http://certificateservice.com/", className = "com.statisticsservice.certificateservice.GetAllExamTypes")
    @ResponseWrapper(localName = "getAllExamTypesResponse", targetNamespace = "http://certificateservice.com/", className = "com.statisticsservice.certificateservice.GetAllExamTypesResponse")
    @Action(input = "http://certificateservice.com/CertificateService/getAllExamTypesRequest", output = "http://certificateservice.com/CertificateService/getAllExamTypesResponse")
    public List<ExamType> getAllExamTypes();

    /**
     * 
     * @param certificateCode
     * @return
     *     returns com.statisticsservice.certificateservice.Certificate
     * @throws NonexistentCertificateException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getCertificate", targetNamespace = "http://certificateservice.com/", className = "com.statisticsservice.certificateservice.GetCertificate")
    @ResponseWrapper(localName = "getCertificateResponse", targetNamespace = "http://certificateservice.com/", className = "com.statisticsservice.certificateservice.GetCertificateResponse")
    @Action(input = "http://certificateservice.com/CertificateService/getCertificateRequest", output = "http://certificateservice.com/CertificateService/getCertificateResponse", fault = {
        @FaultAction(className = NonexistentCertificateException_Exception.class, value = "http://certificateservice.com/CertificateService/getCertificate/Fault/NonexistentCertificateException")
    })
    public Certificate getCertificate(
        @WebParam(name = "certificateCode", targetNamespace = "")
        String certificateCode)
        throws NonexistentCertificateException_Exception
    ;

}
